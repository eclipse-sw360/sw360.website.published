<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Eclipse SW360 – SW360 Best Practices</title><link>https://www.eclipse.org/sw360/docs/userguide/bestpractices/</link><description>Recent content in SW360 Best Practices on Eclipse SW360</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://www.eclipse.org/sw360/docs/userguide/bestpractices/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Workflows</title><link>https://www.eclipse.org/sw360/docs/userguide/bestpractices/workflows/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eclipse.org/sw360/docs/userguide/bestpractices/workflows/</guid><description>
&lt;p>This page is one of the basic user workflow documentation pages. It can give orientation how the sw360 can be used - as guidance or orientation. There is no particular need to follow these workflows, it is just one way. Workflows are shown as flow charts.&lt;/p>
&lt;h3 id="create-component-and-release">Create Component and Release&lt;/h3>
&lt;p>So, the user would like to create an entry for zlib-1.2.8 for example in sw360. The main thing to know (see page basic concepts)is that sw360 separates releases from components: the release is the zlib-1.2.8 but the component is the zlib. By this approach, components as a kind of container type in sw360, holding several releases.&lt;/p>
&lt;p>Therefore, for a new component the user needs to create a component entry first, and then add a release to it. Just adding a release will not work. If a component with a different release already exists, the users add a release to the existing component.&lt;/p>
&lt;p>The intended roles for this can be a developer that would like to start caring for an OSS component or release. In addition a project owner / project owner can care for the components and releases part of the product or process.&lt;/p>
&lt;figure>
&lt;img src="https://www.eclipse.org/sw360/sw360/img/workflow/worklfow-adding-component-and-release-to-a-project.png"/>
&lt;/figure>
&lt;h3 id="create-a-project">Create a Project&lt;/h3>
&lt;p>A project is a structure to keep track on releases inside project, as well as other projects. Please note that a project can be also a product, depending on the type of business. the use of the term &amp;lsquo;project&amp;rsquo; is used also for subsuming the term &amp;lsquo;product&amp;rsquo;.&lt;/p>
&lt;p>As for the integration case with the OSS software FOSSology, the project view allows for an overview, which of the used components have been analyzed with FOSSology already.&lt;/p>
&lt;p>In the diagram, the &amp;ldquo;clearing process&amp;rdquo; is mentioned, because the clearing process affects the software components of a project. The main approach is the following:&lt;/p>
&lt;ul>
&lt;li>A project responsible sets up a project with used releases.&lt;/li>
&lt;li>For the releases that were not analyzed before, the project responsible requests a clearing - source files can be transferred to FOSSology.&lt;/li>
&lt;li>Once analyses for all releases are complete, the &amp;ldquo;clearing process&amp;rdquo; is finished for this project.&lt;/li>
&lt;/ul>
&lt;p>A project it self does not need much information, it is just about the name and the version. Note that some of the information is like to be set at that time:&lt;/p>
&lt;ul>
&lt;li>Visibility level&lt;/li>
&lt;li>Project contacts&lt;/li>
&lt;li>Important Dates for the project&lt;/li>
&lt;/ul>
&lt;figure>
&lt;img src="https://www.eclipse.org/sw360/sw360/img/workflow/workflow-add-project.png"/>
&lt;/figure>
&lt;h3 id="moderation">Moderation&lt;/h3>
&lt;p>The moderation is the basic way of applying changes if the document is not created by someone else. In sw360 the following person can edit documents right away (without moderation request):&lt;/p>
&lt;ul>
&lt;li>The creator of a document (document is a project entry, a release entry etc)&lt;/li>
&lt;li>Admins&lt;/li>
&lt;li>Clearing admins&lt;/li>
&lt;li>Moderators of this document&lt;/li>
&lt;li>Other special roles, such as project responsible&lt;/li>
&lt;/ul>
&lt;p>Please see the page &lt;a href="https://www.eclipse.org/sw360/docs/development/dev-role-authorisation-model/" title="Dev Role">about the Role Authorization Model&lt;/a> for more information.&lt;/p>
&lt;p>If the user who wishes to change a document and is not one of these, the moderator workflow kicks in. Then changes applied to the document are not really applied, but are sent to a moderator. Moderators are:&lt;/p>
&lt;ul>
&lt;li>The creator of a document (document is a project entry, a release entry etc)&lt;/li>
&lt;li>Admins&lt;/li>
&lt;li>Clearing admins&lt;/li>
&lt;li>Moderators of this document&lt;/li>
&lt;/ul>
&lt;p>The moderator can review, approve or decline the request. Then, the requesting user can delete the request. The moderator request workflow is shown below.&lt;/p>
&lt;figure>
&lt;img src="https://www.eclipse.org/sw360/sw360/img/workflow/workflow-moderation.png"/>
&lt;/figure></description></item><item><title>Docs: Naming a Component</title><link>https://www.eclipse.org/sw360/docs/userguide/bestpractices/component-naming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eclipse.org/sw360/docs/userguide/bestpractices/component-naming/</guid><description>
&lt;p>&lt;strong>The name is the most important criteria to identify software components. Unfortunately there is no common naming scheme available.&lt;/strong>&lt;/p>
&lt;h2 id="usage-and-handling-of-components">Usage and Handling of Components&lt;/h2>
&lt;ul>
&lt;li>If you create a component entry, most likely you will go ahead with a release entry, otherwise, the component stays an empty shell&lt;/li>
&lt;li>Uploading source packages / actual software as attachment makes sense at the release, not at the component&lt;/li>
&lt;li>If you have created a component and release entry, you can go ahead and assign a vendor to a release.&lt;/li>
&lt;/ul>
&lt;p>This very clear approach enables a number of issues, please keep the following goals in mind:&lt;/p>
&lt;ul>
&lt;li>Duplicate entries need to be removed&lt;/li>
&lt;li>Separating vendor from components names and release tags brings clarity to component naming&lt;/li>
&lt;li>Interaction with other systems is a must today. As such we need to support external ids such as the CPE standard which also implement this 3-parts separation&lt;/li>
&lt;li>Having the clear modelling of data enables better search and filtering abilities of the component catalogue.&lt;/li>
&lt;/ul>
&lt;h2 id="checklist">Checklist&lt;/h2>
&lt;ul>
&lt;li>Does the component already exist on SW360 (think about possible different names)?&lt;/li>
&lt;li>What is the name of the component homepage?&lt;/li>
&lt;li>What is the name of the community? Please note that repositories like Maven, GitHub, CodePlex, - CodeGuru are not vendors in our understanding!&lt;/li>
&lt;li>How is component called on repositories like Maven, NuGet, etc.?&lt;/li>
&lt;li>Take care: use the name and not the id!&lt;/li>
&lt;li>Search SW360 for the component repository id.&lt;/li>
&lt;li>Search SW360 for all possible name variations.&lt;/li>
&lt;li>Ask your local software clearing expert for help.&lt;/li>
&lt;/ul>
&lt;h2 id="naming-a-component---special-cases">Naming a Component - Special Cases&lt;/h2>
&lt;h3 id="net-component-from-github">.Net Component from GitHub&lt;/h3>
&lt;p>&lt;img src="SW360_NamingaComponentimage/draft_30.png" alt="draft_30"> In some case it is difficult to determine the real name of a component, like for example &lt;em>Microsoft Entity Framework for .Net Core (or Entity Framework Core or Aspnet EntityFrameworkCore or ASP.NET EntityFrameworkCore)&lt;/em>. In these cases it might be the best way to use that package name as specified on Nuget, in this case &lt;strong>Microsoft.EntityFrameworkCore&lt;/strong>.&lt;/p>
&lt;h3 id="java-components">Java Components&lt;/h3>
&lt;p>The name of a Java component should be how it is called by the Java community. Typically this is the name as it can be found on the project homepage or on the source code repository page.&lt;/p>
&lt;p>Examples:&lt;/p>
&lt;ul>
&lt;li>&amp;lsquo;Spring Framework&amp;rsquo; (from project home page &lt;a href="https://spring.io/projects">&lt;span style="color:red">↗&lt;/span> https://spring.io/projects&lt;/a> or also from source code repository &lt;a href="https://github.com/spring-projects/spring-framework">&lt;span style="color:red">↗&lt;/span> https://github.com/spring-projects/spring-framework&lt;/a>)&lt;/li>
&lt;li>&amp;lsquo;Spring Data Redis&amp;rsquo; (from project home page &lt;a href="https://spring.io/projects/spring-data">&lt;span style="color:red">↗&lt;/span> https://spring.io/projects/spring-data&lt;/a> or also from source code repository &lt;a href="https://github.com/spring-projects/spring-data-redis">&lt;span style="color:red">↗&lt;/span> https://github.com/spring-projects/spring-data-redis&lt;/a>)&lt;/li>
&lt;li>&amp;lsquo;Thymeleaf&amp;rsquo; (from project home page &lt;a href="https://www.thymeleaf.org/">&lt;span style="color:red">↗&lt;/span> https://www.thymeleaf.org/&lt;/a>; source code repository &lt;a href="https://github.com/thymeleaf/thymeleaf">&lt;span style="color:red">↗&lt;/span> https://github.com/thymeleaf/thymeleaf&lt;/a>)&lt;/li>
&lt;li>&amp;lsquo;Thymeleaf Spring 5 Integration&amp;rsquo; (from project home page &lt;a href="https://www.thymeleaf.org/download.html">&lt;span style="color:red">↗&lt;/span> https://www.thymeleaf.org/download.html&lt;/a> or source code repository page &lt;a href="https://github.com/thymeleaf/thymeleaf-spring">&lt;span style="color:red">↗&lt;/span> https://github.com/thymeleaf/thymeleaf-spring&lt;/a> → &lt;a href="https://github.com/thymeleaf/thymeleaf-spring/tree/3.0-master/thymeleaf-spring5">&lt;span style="color:red">↗&lt;/span> thymeleaf-spring5&lt;/a>&lt;/li>
&lt;li>&amp;lsquo;Commons Codec&amp;rsquo; (from project home page &lt;a href="https://commons.apache.org/proper/commons-codec/">&lt;span style="color:red">↗&lt;/span> https://commons.apache.org/proper/commons-codec/&lt;/a> or source code repository page &lt;a href="https://github.com/apache/commons-codec">&lt;span style="color:red">↗&lt;/span> https://github.com/apache/commons-codec&lt;/a>) [or better &amp;lsquo;Apache Commons Codec&amp;rsquo;? But &amp;lsquo;Apache&amp;rsquo; is already the vendor&amp;rsquo;]&lt;/li>
&lt;/ul>
&lt;p>Do not use jar names or Gradle/Maven artifactIds, like &amp;lsquo;spring-framework&amp;rsquo;. Main reason is that from such a name one cannot see if this component is a whole component (here the Spring Framework) or only the Java archive spring-framework-&lt;version>.jar (which is only a subset of the Spring Framework)!&lt;/p>
&lt;p>Hierarchical Java components:&lt;/p>
&lt;p>Java components often consist of multiple subcomponents (typically jars) where the sources are stored in a hierarchical structure in the source code repoistory. E.g. for &amp;lsquo;Spring Framework&amp;rsquo; there is one repository &lt;a href="https://github.com/spring-projects/spring-framework">&lt;span style="color:red">↗&lt;/span> https://github.com/spring-projects/spring-framework&lt;/a> with several sub folders for individual jars. In general for such cases there should be only one (main) component in SW360 covering all the subcomponents.&lt;/p>
&lt;p>In some exceptional cases one wants to do the clearing only for one subcomponent or a subset of a hierarchical components. In such a case one can either add the name of the sub component to the component name to mark the subset (like &amp;lsquo;Thymeleaf Spring 5 Integration&amp;rsquo; above, showing that only the Spring 5 related is covered, and not Spring 3 or 4) or one could use the name of the top level component (like &amp;lsquo;Thymeleaf Spring Integration&amp;rsquo;) and have seprate releases for the subset (&amp;lsquo;3.0.9.RELEASE Spring 5&amp;rsquo;).&lt;/p>
&lt;p>Identifying a (new or existing) SW360 component for a java archive:&lt;/p>
&lt;p>Java developers typically have to start with a Java archive which they want to add to a product, or with the related Gradle/Maven coordinates (groupId/artifactId/version). Possible ways to identify the related component (name) are: examine the related pom.xml or the MANIFEST.MF file of the jar. There one can often find more information like the community homepage or source code repository URL from which then again to determine the component (name).&lt;/p>
&lt;p>&lt;em>Unfortunately SW360 does not provide any support here (besides searching for the artifactId and thus hopefully find the related component). It would be a good idea to store also the Gradle/Maven coordinates of Java binaries with the SW360 components and make them searchable (note: multiple artifactIds per component need to be supported!) and/or to also upload and store the binaries of a registerd SW360 component (or at least the file hashes) and provide additional functionality to identify an unknown binary by uploading the same to SW360.&lt;/em>&lt;/p>
&lt;h2 id="component-scope">Component Scope&lt;/h2>
&lt;p>We base software clearing for open source components on the scan of the source code. If there is only one common source code for a group of components, then it does not make sense to have a lot of distinct (sub)component that all point to a common source.&lt;/p>
&lt;h3 id="example">Example&lt;/h3>
&lt;p>There is a Java component called Logback (&lt;a href="https://logback.qos.ch/">&lt;span style="color:red">↗&lt;/span> https://logback.qos.ch/&lt;/a>). There is only one singe source (and binary) archive available from the original authors. This archive contains three Java libraries: logback-core.jar, logback-access.jar and logback-classic.jar. In &lt;strong>SW360 there should be only one component Logback!&lt;/strong> It is confusing to have also &amp;ldquo;Logback core&amp;rdquo;, &amp;ldquo;logback-core&amp;rdquo;, &amp;ldquo;logback core&amp;rdquo;, &amp;ldquo;logback classic&amp;rdquo; and &amp;ldquo;logback-classic&amp;rdquo;.&lt;/p>
&lt;h2 id="naming-a-component--span-stylecolorredbad-examplesspan">Naming a Component – &lt;span style="color:red">Bad Examples&lt;/span>&lt;/h2>
&lt;h3 id="jsonnet">Json.Net&lt;/h3>
&lt;p>There is a component that is available on NuGet by the name &amp;lsquo;Json.NET&amp;rsquo; and the id &amp;lsquo;Newtonsoft.Json&amp;rsquo;. On the component homepage &lt;a href="http://www.newtonsoft.com/json">&lt;span style="color:red">↗&lt;/span> http://www.newtonsoft.com/json&lt;/a> it is called &amp;lsquo;Json.NET&amp;rsquo;.&lt;/p>
&lt;p>Just some examples of naming and how it could be improved:&lt;/p>
&lt;ul>
&lt;li>14 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;Json.NET&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>1 x Vendor = &amp;lsquo;Newtonsoft&amp;rsquo;, Name = &amp;lsquo;Json.NET (COTS)&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>2 x Vendor = &amp;lsquo;NuGet Gallery&amp;rsquo;, Name = Json.NET&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>1 x Vendor = &amp;lsquo;CodePlex&amp;rsquo;, Name = Json.NET&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>4 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;Newtonsoft Json.NET&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;/ul>
&lt;p>The proper identification (Vendor = &amp;lsquo;Newtonsoft&amp;rsquo;, Name = &amp;lsquo;Json.NET&amp;rsquo;) has to be used!&lt;/p>
&lt;h3 id="oracle-javabeans-activation-framework">Oracle JavaBeans Activation Framework&lt;/h3>
&lt;p>Just some examples of naming and how it could be improved:&lt;/p>
&lt;ul>
&lt;li>3 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;Activation&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>3 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;Oracle JavaBeans Activation Framework&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;h3 id="oracle-java-mail">Oracle Java Mail&lt;/h3>
&lt;p>Just some examples of naming and how it could be improved:&lt;/p>
&lt;ul>
&lt;li>3 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;Mail&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>5 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;Oracle JavaMail API&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>4 x Vendor = &amp;lsquo;Oracle&amp;rsquo;, Name = &amp;lsquo;Oracle JavaMail API&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;h3 id="momentjs">Moment.js&lt;/h3>
&lt;p>Just some examples of naming and how it could be improved:&lt;/p>
&lt;ul>
&lt;li>7 x Vendor = &amp;lsquo;GitHub&amp;rsquo;, Name = &amp;lsquo;moment&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>2 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;moment&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>2 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;Moment JS&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>3 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;MomentJS&amp;rsquo; =&amp;gt; &lt;strong>wrong&lt;/strong>!&lt;/li>
&lt;li>3 x Vendor = &amp;lsquo;Open Source Software&amp;rsquo;, Name = &amp;lsquo;Moment.js&amp;rsquo;&lt;/li>
&lt;/ul>
&lt;p>Just look on the community homepage: there is the name in bold letters:
Moment.js – consider this name.&lt;/p></description></item><item><title>Docs: Attachment File Types</title><link>https://www.eclipse.org/sw360/docs/userguide/bestpractices/user-attachment-file-types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eclipse.org/sw360/docs/userguide/bestpractices/user-attachment-file-types/</guid><description>
&lt;p>SW360 maintains attachments for projects, components and releases. Currently, SW360 cannot automatically detect these types and is dependent on that users select the appropriate type accordingly. If not, some functionality will not properly kick of that uses such attachments.&lt;/p>
&lt;p>Also, maybe some of the types are redundant by now and are just legacy ideas that should be reviewed after two years now.&lt;/p>
&lt;p>In summary, the following the types currently are as follows:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Type name&lt;/th>
&lt;th style="text-align:left">Functionality&lt;/th>
&lt;th style="text-align:left">Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">SOURCE&lt;/td>
&lt;td style="text-align:left">for sending to tools&lt;/td>
&lt;td style="text-align:left">Source packages of a release as found on the Internet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">COMPONENT_LICENSE_INFO_XML&lt;/td>
&lt;td style="text-align:left">for project documentation generation&lt;/td>
&lt;td style="text-align:left">An XML-based description of the licenses and coprights involved&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DESIGN&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">Just nomenclature to name this not document&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">REQUIREMENT&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">Just a general placeholder for an attachment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DOCUMENT&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">Just a general placeholder for an attachment&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">CLEARING_REPORT&lt;/td>
&lt;td style="text-align:left">Setting clearing status&lt;/td>
&lt;td style="text-align:left">Reporting information for component license state&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">COMPONENT_LICENSE_INFO_COMBINED&lt;/td>
&lt;td style="text-align:left">(should be) for project documentation generation&lt;/td>
&lt;td style="text-align:left">Multiple components with component license information&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">SCAN_RESULT_REPORT&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">Just description what scanners found without conclusions&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">SCAN_RESULT_REPORT_XML&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">Just description what scanners found without conclusions in XML&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">SOURCE_SELF&lt;/td>
&lt;td style="text-align:left">(should be) for sending to tools&lt;/td>
&lt;td style="text-align:left">Source packages build self, because not available in the Internet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BINARY&lt;/td>
&lt;td style="text-align:left">future: for sending to tool doing binary analysis&lt;/td>
&lt;td style="text-align:left">Binary from the publisher&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">BINARY_SELF&lt;/td>
&lt;td style="text-align:left">future: for sending to tool doing binary analysis&lt;/td>
&lt;td style="text-align:left">Self built binary&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">DECISION_REPORT&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">Decision information ref. the component&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LEGAL_EVALUATION&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">Internally created legal evaluation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">LICENSE_AGREEMENT&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">Document describing the license agreement&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">SCREENSHOT&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">If licensing information is captured with screenshot&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">OTHER&lt;/td>
&lt;td style="text-align:left">n.a.&lt;/td>
&lt;td style="text-align:left">If not document&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Record Creation</title><link>https://www.eclipse.org/sw360/docs/userguide/bestpractices/good-record-creation-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eclipse.org/sw360/docs/userguide/bestpractices/good-record-creation-structure/</guid><description>
&lt;h2 id="how-to-create-component-entries">How to Create (Component) Entries?&lt;/h2>
&lt;p>In order to have a clean and useful catalogue, data hygiene is very important. The main goal is to have clean component / release datasets that allow for versatile use and seamless integration with other systems (see the Handling of Components above). When creating a component, please consider the following rules:&lt;/p>
&lt;ul>
&lt;li>What is the name of the vendor, the name of the component and what is the release designator?&lt;/li>
&lt;li>For the Vendor
&lt;ul>
&lt;li>Does a CPE entry exist?
&lt;ul>
&lt;li>Look here: &lt;a href="https://nvd.nist.gov/cpe.cfm">&lt;span style="color:red">↗&lt;/span> https://nvd.nist.gov/cpe.cfm&lt;/a> or &lt;a href="http://scap.nist.gov/specifications/cpe/dictionary.html">&lt;span style="color:red">↗&lt;/span> http://scap.nist.gov/specifications/cpe/dictionary.html&lt;/a>&lt;/li>
&lt;li>Use the same writing as found in the CPE dictionary&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A CPE does not exist?
&lt;ul>
&lt;li>Who is the copyright holder: an organization?
&lt;ul>
&lt;li>Use this organization name without &amp;ldquo;inc&amp;rdquo;, &amp;ldquo;Gmbh&amp;rdquo;, etc.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>A person
&lt;ul>
&lt;li>Look at the CPE dictionaries for example&lt;/li>
&lt;li>They use first name last name with &amp;ldquo;_&amp;rdquo;, for example &amp;ldquo;Wedge_Antilles&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>For a component
&lt;ul>
&lt;li>Again, does a CPE entry exist?&lt;/li>
&lt;li>Separate Component name from release designation&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>For a release
&lt;ul>
&lt;li>Do not repeat the component name&lt;/li>
&lt;li>Use the release designation as provided by the software package&lt;/li>
&lt;li>Avoid prefixes, such as &amp;ldquo;version&amp;rdquo;, &amp;ldquo;v&amp;rdquo; etc&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>For special cases:
&lt;ul>
&lt;li>If you upload a part of a release software package, create a &lt;strong>separate&lt;/strong> release for this&lt;/li>
&lt;li>For example &amp;ldquo;2.0-MODIFIED&amp;rdquo;&lt;/li>
&lt;li>Consider that leaving items out from a software release is actually a modification&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-create-vendors">How to Create Vendors&lt;/h2>
&lt;p>In order to have a vendor record in the sw360, then choosing a name is important. The vendor in SW360 is the real &amp;ldquo;manufacturer&amp;rdquo; independently from where you download it.&lt;/p>
&lt;p>There are different cases:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>COTS:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Obvious case: use vendor short name in CPE style and long name for the actual company name (Apple Inc. vs. Apple)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You could even search for an existing vendor entry in the CPE dictionary to get existing vendor naming rules and use this as short name.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Consider the following link: &lt;a href="https://nvd.nist.gov/products/cpe/search">&lt;span style="color:red">↗&lt;/span> https://nvd.nist.gov/products/cpe/search&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Vendor is actually entity that is contract partner, but is confusing: for Microsoft products, there could be a Microsoft certified solution partner which is the vendor, this must mapped differently in the SW360.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>General rule&lt;/strong>: Vendor is meant to be manufacturing party not distributing / delivering party.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Freeware&lt;/p>
&lt;ul>
&lt;li>Problem is that freeware has an author, but also different &amp;ldquo;vendors&amp;rdquo; in terms of where it could be downloaded from. This is difficult because different download Web site may involve different licensing conditions.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>OSS:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Community name, e.g. zlib project for zlib.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Or the org name of the github orgname or sourceforge group name&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Do not use &amp;ldquo;Github&amp;rdquo; or &amp;ldquo;Sourceforge&amp;rdquo; as vendor&lt;/p>
&lt;/li>
&lt;li>
&lt;p>However, foundations, publishing the software would be a vendor, e.g. &amp;ldquo;Apache&amp;rdquo;, &amp;ldquo;Eclipse&amp;rdquo;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>But eclipse has a github organization anyway, for example&lt;/p>
&lt;/li>
&lt;li>
&lt;p>With single author projects should you take the author name. A &amp;ldquo;john_doe&amp;rdquo; from John Doe as short name.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;p>Note that very release has its own vendor. as a consequence:&lt;/p>
&lt;ul>
&lt;li>There could be a release from one Web page and one release downloaded from another Web page. If there is different licensing or sources involved, this could be a solution.&lt;/li>
&lt;/ul>
&lt;h2 id="naming-a-vendor">Naming a Vendor&lt;/h2>
&lt;p>Each release of a component has a vendor or community. Having unambiguous vendor names is very helpful for managing 3rd party software components.&lt;/p>
&lt;p>Required information:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Full name&lt;/strong> - The full name of the company, organization or person.&lt;/li>
&lt;li>&lt;strong>Short name&lt;/strong> - A good short name, compatible to CPE (see section 8.3)&lt;/li>
&lt;li>&lt;strong>URL&lt;/strong> - The URL of the organization or a URL where we can get more information about a person.&lt;/li>
&lt;/ul>
&lt;h3 id="how-to-find-a-good-vendor-name">How to find a (good) vendor name?&lt;/h3>
&lt;p>Some guidelines&lt;/p>
&lt;ul>
&lt;li>If there is a company (Microsoft, Oracle, Pivotal, etc.) behind the component, that&amp;rsquo;s most probably the right vendor name.&lt;/li>
&lt;li>If there is an well known open source community (Apache, Eclipse, etc.) behind the component, that&amp;rsquo;s is the right vendor name.&lt;/li>
&lt;li>If there is only a single person developing the component, then this is the vendor.&lt;/li>
&lt;li>If there is a GitHub organization name or person name available, use this one.&lt;/li>
&lt;li>&lt;strong>No vendor names are&lt;/strong>: &amp;lsquo;Open Source Software&amp;rsquo;, &amp;lsquo;NuGet Gallery&amp;rsquo;, &amp;lsquo;CodePlex&amp;rsquo;, &amp;lsquo;Codeguru&amp;rsquo;, &amp;lsquo;Stack Overflow&amp;rsquo;, &amp;lsquo;CodeProject&amp;rsquo;, etc. as these or only platform, where vendors can offer the projects and these name do not help to identify projects.&lt;/li>
&lt;/ul>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;h4 id="microsoft">Microsoft&lt;/h4>
&lt;p>Full name = Microsoft Corporation&lt;/p>
&lt;p>Short name = Microsoft&lt;/p>
&lt;p>URL = &lt;a href="https://www.microsoft.com/en-in/">&lt;span style="color:red">↗&lt;/span> www.microsoft.com&lt;/a>&lt;/p>
&lt;h4 id="apache">Apache&lt;/h4>
&lt;p>Full name = Apache Software Foundation&lt;/p>
&lt;p>Short name = Apache&lt;/p>
&lt;p>URL = &lt;a href="http://www.apache.org/">&lt;span style="color:red">↗&lt;/span> http://www.apache.org/&lt;/a>&lt;/p>
&lt;h4 id="constantin-titarenko">Constantin Titarenko&lt;/h4>
&lt;p>Full name = Constantin Titarenko&lt;/p>
&lt;p>Short name = constantin_titarenko (Note the underscore!)&lt;/p>
&lt;p>URL = &lt;a href="https://github.com/titarenko">&lt;span style="color:red">↗&lt;/span> https://github.com/titarenko&lt;/a>&lt;/p>
&lt;h2 id="how-to-determine-the-cpe">How to determine the CPE?&lt;/h2>
&lt;p>The Common Platform Enumeration (CPE) is used to have an unambiguous identification of a specific component release. This information is especially needed to find matching security vulnerability information.&lt;/p>
&lt;h3 id="syntax-of-a-cpe-entry">Syntax of a CPE Entry&lt;/h3>
&lt;p>The syntax of a CPE entry is defined as:&lt;/p>
&lt;p>&lt;code>cpe:&amp;lt;CPE-Version&amp;gt;:&amp;lt;part&amp;gt;:&amp;lt;vendor&amp;gt;:&amp;lt;product&amp;gt;:&amp;lt;version&amp;gt;:&amp;lt;update&amp;gt;:&amp;lt;edition&amp;gt;:&amp;lt;language&amp;gt;&lt;/code>&lt;/p>
&lt;p>&lt;strong>CPE-Version&lt;/strong> refers to the CPE naming format version. We will always use version 2.3&lt;/p>
&lt;p>&lt;strong>part&lt;/strong> refers to the type of the component (a = application, o = operating system, h =hardware device)&lt;/p>
&lt;p>&lt;strong>vendor&lt;/strong> refers to the vendor or author of the component. Only small letters are allowed.&lt;/p>
&lt;p>&lt;strong>product&lt;/strong> refers to the name of the product. Only small letters are allowed.&lt;/p>
&lt;p>&lt;strong>version&lt;/strong> refers to the version of the product.&lt;/p>
&lt;p>&lt;strong>update&lt;/strong> refers to the updates of this specific version&lt;/p>
&lt;p>&lt;strong>edition&lt;/strong> and &lt;strong>language&lt;/strong> can be used to specify more details&lt;/p>
&lt;p>Non-existing or unknown party can get replaced by the placeholder &amp;lsquo;*&amp;rsquo;.&lt;/p>
&lt;p>&lt;strong>Note&lt;/strong>: only small letters are allowed. Spaces have to be replaced by underlines &amp;lsquo;_&amp;rsquo;.&lt;/p>
&lt;h3 id="examples-1">Examples&lt;/h3>
&lt;p>&lt;strong>Microsoft .Net Framework, version 1.0 SP2&lt;/strong>&lt;/p>
&lt;p>&lt;code>cpe:2.3:a:microsoft:.net_framework:1.0:sp2:*:*:*:*:*:*&lt;/code>&lt;/p>
&lt;p>&lt;strong>Apache ActiveMQ, version 4.0&lt;/strong>&lt;/p>
&lt;p>&lt;code>cpe:2.3:a:apache:activemq:4.0:*:*:*:*:*:*:*&lt;/code>&lt;/p>
&lt;p>&lt;strong>Apache log4net, version 1.2.9 beta&lt;/strong>&lt;/p>
&lt;p>&lt;code>cpe:2.3:a:apache:log4net:1.2.9_beta:*:*:*:*:*:*:*&lt;/code>&lt;/p>
&lt;p>&lt;strong>Oracle Java Runtime, version 1.7.0, update 51&lt;/strong>&lt;/p>
&lt;p>&lt;code>cpe:2.3:a:oracle:jre:1.7.0:update_51:*:*:*:*:*:*&lt;/code>&lt;/p></description></item><item><title>Docs: License Naming</title><link>https://www.eclipse.org/sw360/docs/userguide/bestpractices/license-naming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eclipse.org/sw360/docs/userguide/bestpractices/license-naming/</guid><description>
&lt;h2 id="guidelines">Guidelines&lt;/h2>
&lt;p>Generally the license naming should conform with the SPDX Spec and the SPDX License List&lt;/p>
&lt;p>Please see the &amp;ldquo;License List Fields&amp;rdquo; from &lt;a href="https://spdx.org/spdx-license-list/license-list-overview#fields">&lt;span style="color:red">↗&lt;/span> https://spdx.org/spdx-license-list/license-list-overview#fields&lt;/a>&lt;/p>
&lt;p>where there is especially for identifier:&lt;/p>
&lt;h4 id="license-or-exception-identifier-aka-spdx-short-identifier">License or Exception Identifier (aka &amp;ldquo;SPDX Short Identifier&amp;rdquo;)&lt;/h4>
&lt;p>Short identifier to be used to identify a license or exception match to licenses or exceptions contained on the SPDX License List in the context of an SPDX file, in source file, or elsewhere&lt;/p>
&lt;ul>
&lt;li>Short identifiers have no spaces in them&lt;/li>
&lt;li>Short identifiers consist of an abbreviation based on a common short name or acronym for the license or exception&lt;/li>
&lt;li>Where applicable, the abbreviation will be followed by a dash and then the version number, in X.Y format&lt;/li>
&lt;li>Where applicable, and if possible, the short identifier should be harmonised with other well-known open source naming sources (i.e., OSI, Fedora, etc.)&lt;/li>
&lt;li>Short identifiers should be as short in length as possible while staying consistent with all other naming criteria&lt;/li>
&lt;/ul>
&lt;p>This lead to expressions like &amp;ldquo;Apache-2.0&amp;rdquo; or &amp;ldquo;GPL-2.0&amp;rdquo;.&lt;/p>
&lt;h2 id="license-exceptions">License Exceptions&lt;/h2>
&lt;p>As a provisoric handling advise, the exception text shall be combined with the license text as a license entry. This ensures that license and exception appear together in the clearing report.&lt;/p>
&lt;p>Class Path Exception&lt;/p>
&lt;p>Linking this library statically or dynamically with other modules is making a combined work based on this library. Thus, the terms and conditions of the GNU General Public License cover the whole combination.&lt;/p>
&lt;p>As a special exception, the copyright holders of this library give you permission to link this library with independent modules to produce an executable, regardless of the license terms of these independent modules, and to copy and distribute the resulting executable under terms of your choice, provided that you also meet, for each linked independent module, the terms and conditions of the license of that module. An independent module is a module which is not derived from or based on this library. If you modify this library, you may&lt;/p>
&lt;h2 id="dual-licenses">Dual Licenses&lt;/h2>
&lt;p>There is the need to have a dual license text. FOSSology offers the dual license tag for this. The idea is to use this tag also for more than two licenses.&lt;/p>
&lt;p>Consider the following example:&lt;/p>
&lt;figure>
&lt;img src="https://www.eclipse.org/sw360/sw360/img/ImagesBasic/dual_license.png"/>
&lt;/figure>
&lt;p>The fact that it is &amp;ldquo;LGPL-3.0+&amp;rdquo; is confusing for these texts. It should be changed to the following:&lt;/p>
&lt;ul>
&lt;li>The License results shall be changed &amp;ldquo;Dual-License&amp;rdquo;. This is among other things required, to have the obligation to understand that for this component a license must be chosen&lt;/li>
&lt;li>In the acknowledgement, there shall be documented which license decision comes is documented&lt;/li>
&lt;li>For the referring files, also the different other licenses must be added as conclusions, so the texts are printed out.&lt;/li>
&lt;/ul>
&lt;h2 id="quick-checklist">Quick Checklist&lt;/h2>
&lt;ul>
&lt;li>Shortname: No spaces, No slashses, No unserscore or similar spcial charaters, just use dashes&lt;/li>
&lt;li>Consider existing SPDX short names&lt;/li>
&lt;li>Do not use &amp;ldquo;Or later&amp;rdquo; but &amp;ldquo;+&amp;rdquo; or &amp;ldquo;-or-later&amp;rdquo;&lt;/li>
&lt;li>For triple licensing, use prefix &amp;ldquo;Triple&amp;rdquo;&lt;/li>
&lt;li>ERASE COMMENT CHARACTERS! also erase prefix spaces at every line&lt;/li>
&lt;li>Preserve paragraphs and line breaks&lt;/li>
&lt;li>Avid markup in the license text except it is part of the licensing&lt;/li>
&lt;/ul>
&lt;h2 id="multi-dual--licensing">Multi (DUAL-) Licensing&lt;/h2>
&lt;ul>
&lt;li>VERY Important, as conclusion, use the FOSSology &amp;ldquo;Dual-license&amp;rdquo;, please do not consider your own candidate just designating &amp;ldquo;Dual License&amp;rdquo; (because OR operators will not work in reporting)&lt;/li>
&lt;li>For Dual License texts use prefix &amp;ldquo;Dual-&amp;rdquo;&lt;/li>
&lt;li>For Triple, use &amp;ldquo;Triple-&amp;rdquo; (and for more &amp;ldquo;Quadruple-&amp;rdquo;)&lt;/li>
&lt;li>For Dual Licensing, use alphabetical order to name the licenses&lt;/li>
&lt;li>SPDX provides the rule to have this merged with &amp;ldquo;OR&amp;rdquo; (in capital letters) like &amp;ldquo;Dual-MIT-OR-BSD&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;h2 id="examples-for-renaming">Examples for Renaming&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example Licence Short Name&lt;/th>
&lt;th>Corrected Licence Short Name&lt;/th>
&lt;th>Remarks&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>BSD-3-Clause-Farin Urlaub&lt;/td>
&lt;td>BSD-3-Clause-farin-urlaub&lt;/td>
&lt;td>no empty spaces&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GPL-2.0+_Variant Old address&lt;/td>
&lt;td>GPL-2.0+-variant-old-address&lt;/td>
&lt;td>no underscore&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ndash;Freeware&lt;/td>
&lt;td>Freeware-variant-dumbumchong&lt;/td>
&lt;td>no prefix dashes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BSD-3-Clause\IBM&lt;/td>
&lt;td>&amp;hellip;&lt;/td>
&lt;td>do not use slashes (back and forward)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Permission Notice Gordon Sumner&lt;/td>
&lt;td>HPND-gordon-sumner&lt;/td>
&lt;td>consider SPDX shot name &amp;ldquo;HPND&amp;rdquo; for permission notice&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BSD-3-Clause_Ajax.org B.V.&lt;/td>
&lt;td>BSD-3-Clause-ajax&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BSD-3-Clause_Yahoo! Inc&lt;/td>
&lt;td>BSD-3-Clause-yahoo&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BSD-2-Clause CISCO&lt;/td>
&lt;td>BSD-2-Clause-cisco&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ndash;zlib-style&lt;/td>
&lt;td>Zlib-variant-01&lt;/td>
&lt;td>This license could be deleted anyway. (no text)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>woodstock&lt;/td>
&lt;td>Woodstok-Reference-Disclaimer&lt;/td>
&lt;td>1. All short names shall begin with capital letter,&lt;br>2. (not shown), the license text is not a license text actually, but just a reference in a header with disclaimer.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Visual Studio SDK license terms&lt;/td>
&lt;td>Microsoft-Visual-Studio-SDK-2015&lt;/td>
&lt;td>looking at the text, it is from the 2015 version of the SDK&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Trip MPL GPL Apache&lt;/td>
&lt;td>Triple-Apache-2.0-LGPL-2.1-MPL-1.1&lt;/td>
&lt;td>(looking at the text it was LGPL in fact)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ndash;FIPL-1.0&lt;/td>
&lt;td>FIPL-1.0&lt;/td>
&lt;td>Double dash is an old thing coming from mainline ops. Currently there is no similar convention known for FOSSologyNG.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Qt License Agreement_CEM&lt;/td>
&lt;td>Qt-reference-commercial&lt;/td>
&lt;td>In this case, it was reference text only and also only pointing to the commercial licensees only.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ndash;Beer-ware-license-CEM01&lt;/td>
&lt;td>&lt;code>Beerware&lt;/code>&lt;/td>
&lt;td>The text says actually revision 42, revision 42 is a joke. It must be checked if the license is already there&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FundsXpress License&lt;/td>
&lt;td>FXL&lt;/td>
&lt;td>Either FundsXpress or FXL because the point is to have a short name and thus, it would make sense to shorten it.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GFDL - 1.2+&lt;/td>
&lt;td>GFDL-1.2+&lt;/td>
&lt;td>just without spaces please&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>lgpl 2.1 J&lt;/td>
&lt;td>LGPL-2.1-header&lt;/td>
&lt;td>(was a header in this case, because lic text is already there) What does J mean? - no J needed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>MIT !&lt;/td>
&lt;td>&lt;em>do not use candidate licenses&lt;/em>&lt;/td>
&lt;td>Actual text was: &amp;ldquo;This program is made available under the terms of the MIT License.&amp;rdquo; - actually, not a license text!&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Note&lt;/td>
&lt;td>&lt;em>do not use this with candidates&lt;/em>&lt;/td>
&lt;td>Actual text was: &amp;ldquo;(&amp;ldquo;See &lt;a href="http://oxyplot.codeplex.com">&lt;span style="color:red">↗&lt;/span> http://oxyplot.codeplex.com&lt;/a> for more information.&amp;rdquo;)&amp;rdquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Permission_Notice_Timothy O&amp;rsquo;Malley&lt;/td>
&lt;td>HPND-omalley&lt;/td>
&lt;td>do not use special chars, do use SPDX identfiers&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="notice-file">Notice File&lt;/h2>
&lt;p>The following text is not a license statement nor a reference to licensing but a notice file in the sense of the apache 2.0 license. As such, it is not suitable for being collected as a license.&lt;/p>
&lt;p>&lt;code>== NOTICE file corresponding to the section 4 d of ==&lt;/code>&lt;/p>
&lt;p>&lt;code>== the Apache License, Version 2.0, ==&lt;/code>&lt;/p>
&lt;p>&lt;code>== in this case for the Apache Ant distribution. ==&lt;/code>&lt;/p>
&lt;p>=========================================================================&lt;/p>
&lt;p>&lt;code>This product includes software developed by&lt;/code>&lt;/p>
&lt;p>&lt;code>The Apache Software Foundation&lt;/code> (&lt;a href="http://www.apache.org/">&lt;span style="color:red">↗&lt;/span> http://www.apache.org&lt;/a>).&lt;/p>
&lt;p>&lt;code>This product includes also software developed by :&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>the W3C consortium&lt;/code> (&lt;a href="http://www.w3c.org">&lt;span style="color:red">↗&lt;/span> http://www.w3c.org&lt;/a>),&lt;/li>
&lt;li>&lt;code>the SAX project&lt;/code> (&lt;a href="http://www.saxproject.org">&lt;span style="color:red">↗&lt;/span> http://www.saxproject.org&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>&lt;code>Please read the different LICENSE files present in the root directory of this distribution.&lt;/code>&lt;/p>
&lt;h2 id="open-questions">Open Questions&lt;/h2>
&lt;ul>
&lt;li>How to deal with notice files&lt;/li>
&lt;/ul>
&lt;p>(1) &lt;a href="https://spdx.org/spdx-specification-21-web-version">&lt;span style="color:red">↗&lt;/span> https://spdx.org/spdx-specification-21-web-version&lt;/a>&lt;/p></description></item></channel></rss>