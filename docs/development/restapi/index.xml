<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Eclipse SW360 â€“ SW360 RESTful API</title><link>https://www.eclipse.org/sw360/docs/development/restapi/</link><description>Recent content in SW360 RESTful API on Eclipse SW360</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://www.eclipse.org/sw360/docs/development/restapi/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: API Access</title><link>https://www.eclipse.org/sw360/docs/development/restapi/access/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eclipse.org/sw360/docs/development/restapi/access/</guid><description>
&lt;h2 id="how-to-get-access">How to get Access&lt;/h2>
&lt;p>There are the following steps&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Open a browser with developer tools&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go to
&lt;code>https://&amp;lt;my_sw360_server&amp;gt;/authorization/client-management&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To add a new client, enter the following javascript in the dev tools
console&lt;/p>
&lt;pre>&lt;code> xmlHttpRequest = new XMLHttpRequest();
xmlHttpRequest.open('POST', '/authorization/client-management', false);
xmlHttpRequest.setRequestHeader('Content-Type', 'application/json');
xmlHttpRequest.setRequestHeader('Accept', 'application/json');
xmlHttpRequest.send(JSON.stringify(
{
&amp;quot;description&amp;quot; : &amp;quot;my first test client&amp;quot;,
&amp;quot;authorities&amp;quot; : [ &amp;quot;BASIC&amp;quot; ],
&amp;quot;scope&amp;quot; : [ &amp;quot;READ&amp;quot; ],
&amp;quot;access_token_validity&amp;quot; : 3600,
&amp;quot;refresh_token_validity&amp;quot; : 3600
}
));
console.log(xmlHttpRequest.responseText);
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>To manipulate an existing client, do the same but add the clientid to
the data object&lt;/p>
&lt;p>&lt;code>&amp;quot;client_id&amp;quot; : &amp;quot;9e358ca832ce4ce99a770c7bd0f8e066&amp;quot;&lt;/code>&lt;br>
to remove an existing client, enter the following javascript in the
dev tools console&lt;/p>
&lt;pre>&lt;code> xmlHttpRequest = new XMLHttpRequest();
xmlHttpRequest.open('DELETE', '/authorization/client-management/9e358ca832ce4ce99a770c7bd0f8e066', false);
xmlHttpRequest.setRequestHeader('Content-Type', 'application/json');
xmlHttpRequest.setRequestHeader('Accept', 'application/json');
xmlHttpRequest.send();
console.log(xmlHttpRequest.responseText);
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>You receive the token from such request, which looks like&lt;/p>
&lt;pre>&lt;code> {
&amp;quot;access_token&amp;quot; : &amp;quot;eyJhbGciOiJSUzI...&amp;quot;,
&amp;quot;token_type&amp;quot; : &amp;quot;bearer&amp;quot;,
&amp;quot;refresh_token&amp;quot; : &amp;quot;eyJhbGciOiJSUzI1...&amp;quot;,
&amp;quot;expires_in&amp;quot; : 599,
&amp;quot;scope&amp;quot; : &amp;quot;READ WRITE&amp;quot;,
&amp;quot;jti&amp;quot; : &amp;quot;42539b0d-...&amp;quot;
}
&lt;/code>&lt;/pre>
&lt;/li>
&lt;li>
&lt;p>You can try a request which uses for example the tool curl:
&lt;code>curl -X GET -H &amp;quot;Authorization: Bearer [token]&amp;quot; -H &amp;quot;Content-Type: application/json&amp;quot;&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>You can get a new token (you must get a new token) after expiration using client id and secret:
&lt;code>https://&amp;lt;my_sw360_server&amp;gt;/authorization/oauth/token?grant_type=refresh_token&amp;amp;refresh_token=[refresh_token]&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="deprecated-method-access-tokens-from-the-sw360-ui">Deprecated Method: Access Tokens from the SW360 UI&lt;/h2>
&lt;p>Recently SW360 has changed, username/password authentication is not possible anymore. So after successful entitlement login, the user is able to obtain a token with limited validity of time.&lt;/p>
&lt;p>Our tests have confirmed that, if you have used the JWT authentication workflow, the change means for you:&lt;/p>
&lt;ul>
&lt;li>No interaction with authorization service is necessary.&lt;/li>
&lt;li>The token needs to be provided as with the JWT.&lt;/li>
&lt;/ul>
&lt;p>Please find attached, where to obtain the token:&lt;/p>
&lt;figure>
&lt;img src="https://www.eclipse.org/sw360/sw360/img/SW360RESTfulAPIImages/Preferences-AccessToke.png"/>
&lt;/figure>
&lt;p>And then find the interface for issuing the tokens:&lt;/p>
&lt;figure>
&lt;img src="https://www.eclipse.org/sw360/sw360/img/SW360RESTfulAPIImages/Preferences-AccessToke1.png"/>
&lt;/figure>
&lt;h3 id="token-into-which-header">Token into which Header?&lt;/h3>
&lt;p>If you are used to REST clients, you might know that you need some kind of authentication info. Below are the previous and current ways of adding the authentication info to the HTTP header. Now you should add to the header the token value that you can obtain from the sw360 UI (see above):&lt;/p>
&lt;p>&lt;code>Authorization: Token &amp;lt;Token-Value&amp;gt;&lt;/code>&lt;/p>
&lt;p>Previously, when you got the authentication info via the authorization service, it was:&lt;/p>
&lt;p>&lt;code>Authorization: Bearer &amp;lt;JWT-Value&amp;gt;&lt;/code>&lt;/p>
&lt;h3 id="example-powershell-script">Example: PowerShell Script&lt;/h3>
&lt;p>This is an example Thomas Graf has sent around one - might be good to see how this works in general:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-powershell" data-lang="powershell">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#033">$baseUri&lt;/span> = &lt;span style="color:#c30">&amp;#34;https://&amp;lt;my_sw360_server&amp;gt;/resource/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#033">$uri&lt;/span> = &lt;span style="color:#033">$baseUri&lt;/span> + &lt;span style="color:#c30">&amp;#34;api/projects&amp;#34;&lt;/span> &lt;span style="color:#033">$data&lt;/span> = &lt;span style="color:#c30">@&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">{ &amp;#34;name&amp;#34; : &amp;#34;My 5th Dummy Project&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;description&amp;#34; : &amp;#34;Read/write test&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;version&amp;#34;: &amp;#34;1.0&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;tag&amp;#34;: &amp;#34;my tag&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;ownerGroup&amp;#34;: &amp;#34;GROUP&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;projectType&amp;#34;: &amp;#34;PRODUCT&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;linkedProjects&amp;#34;: {},
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;linkedReleases&amp;#34;: {}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">} &amp;#34;@
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">&lt;/span>&lt;span style="color:#033">$headers&lt;/span>&lt;span style="color:#c30"> = New-Object &amp;#34;System.Collections.Generic.Dictionary[[String],[String]]&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">&lt;/span>&lt;span style="color:#033">$headers&lt;/span>&lt;span style="color:#c30">.Add(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/hal+json&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">&lt;/span>&lt;span style="color:#033">$headers&lt;/span>&lt;span style="color:#c30">.Add(&amp;#39;Authorization&amp;#39;, &amp;#39;Token &amp;#39; + &lt;/span>&lt;span style="color:#033">$env:SW360StageToken&lt;/span>&lt;span style="color:#c30">)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">&lt;/span>&lt;span style="color:#033">$headers&lt;/span>&lt;span style="color:#c30">.Add(&amp;#39;Accept&amp;#39;, &amp;#39;application/hal+json&amp;#39;)
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">Invoke-WebRequest &lt;/span>&lt;span style="color:#033">$uri&lt;/span>&lt;span style="color:#c30"> -Method POST -Body &lt;/span>&lt;span style="color:#033">$data&lt;/span>&lt;span style="color:#c30"> -Headers &lt;/span>&lt;span style="color:#033">$headers&lt;/span>&lt;span style="color:#c30">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deprecated-method-authentication-with-username-and-password">Deprecated Method: Authentication with Username and Password&lt;/h2>
&lt;h3 id="if-i-am-not-using-token-but-sw360-elsewhere-how-do-i-obtain-tokens">If I am not using token, but SW360 elsewhere: how do I obtain tokens?&lt;/h3>
&lt;p>There are two steps you need to do with your client. First, Obtain an authorization token. This can be done by executing on the development instance for example be:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X POST --user &lt;span style="color:#c30">&amp;#39;trusted-sw360-client:sw360-secret&amp;#39;&lt;/span> &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span>-d &lt;span style="color:#033">grant_type&lt;/span>&lt;span style="color:#555">=&lt;/span>password&amp;amp;&lt;span style="color:#033">username&lt;/span>&lt;span style="color:#555">=&lt;/span>user@sw360.org&amp;amp;&lt;span style="color:#033">password&lt;/span>&lt;span style="color:#555">=&lt;/span>&lt;span style="color:#f60">12345&lt;/span> &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span>https://&amp;lt;my_sw360_server&amp;gt;/authorization/oauth/token -k
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, for the staging instance, the user must be your user credentials and the trusted client secret looks different.&lt;/p>
&lt;p>Second you need to parameterize your request with this token. Pls. see the link at the very top &amp;lsquo;Technical Information&amp;rsquo;: &lt;a href="https://www.eclipse.org/sw360/docs/development/restapi/dev-rest-api/" title="Rest API">Rest API&lt;/a> for more information.&lt;/p>
&lt;h3 id="faq">FAQ&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>When I use the JWT approach I used curl to retrieve the token and get&lt;/p>
&lt;p>{&amp;ldquo;error&amp;rdquo;:&amp;ldquo;unauthorized&amp;rdquo;,&amp;ldquo;error_description&amp;rdquo;:&amp;ldquo;No AuthenticationProvider found for org.springframework.security.authentication.UsernamePasswordAuthenticationToken&amp;rdquo;}&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Your password seems to be wrong.&lt;/p>
&lt;p>Note, that with curl - you have to escape special characters in your password. E.g. password
123$abc
results in the following request&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>curl -X POST --user &lt;span style="color:#c30">&amp;#39;trusted-sw360-client:sw360-secret&amp;#39;&lt;/span> &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span>-d &lt;span style="color:#033">grant_type&lt;/span>&lt;span style="color:#555">=&lt;/span>password&amp;amp;&lt;span style="color:#033">username&lt;/span>&lt;span style="color:#555">=&lt;/span>user@sw360.org&amp;amp;&lt;span style="color:#033">password&lt;/span>&lt;span style="color:#555">=&lt;/span>123&lt;span style="color:#c30;font-weight:bold">\$&lt;/span>abc &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span>https://&amp;lt;my_sw360_server&amp;gt;/authorization/oauth/token -k
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: SW360 Rest API</title><link>https://www.eclipse.org/sw360/docs/development/restapi/dev-rest-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.eclipse.org/sw360/docs/development/restapi/dev-rest-api/</guid><description>
&lt;p>The sw360 REST API provides access to sw360 resources for external clients. It consists currently of three Maven modules aggregated in one parent module &lt;code>rest&lt;/code> in the sw360 distribution.&lt;/p>
&lt;h1 id="module-structure">Module Structure&lt;/h1>
&lt;p>The &lt;code>rest&lt;/code> module provides a REST API infrastructure for sw360 including:&lt;/p>
&lt;ul>
&lt;li>Module &lt;code>authorization-server&lt;/code> - OAuth2 Authorization Server, offering typical authorization steps of an OAuth2 workflow.&lt;/li>
&lt;li>Module &lt;code>resource-server&lt;/code> - REST API Gateway, providing access to the data for authenticated and authorized users / clients.&lt;/li>
&lt;li>Module &lt;code>rest-common&lt;/code> - only library code that is shared between the other rest modules.&lt;/li>
&lt;/ul>
&lt;p>The REST API implementation uses:&lt;/p>
&lt;ul>
&lt;li>Module &lt;code>authorization-server&lt;/code> uses the Liferay user management via the Liferay REST API to authenticate users and the users thrift backend service to access user profile data.&lt;/li>
&lt;li>Module &lt;code>resource-server&lt;/code> uses thrift backend services for accessing sw360 data to deliver it to the external clients.&lt;/li>
&lt;/ul>
&lt;h1 id="api-principles">API Principles&lt;/h1>
&lt;h2 id="security-principles">Security Principles&lt;/h2>
&lt;p>The basic security principles are following the OAuth2 standards. So there should be an authorization server which can be the one contained in this project. That one provides access tokens after it authenticated the client and the user using this client. In addition it checks which authorities this client should receive for operating in the user&amp;rsquo;s name.
With this OAuth2 access token the client can query the resource server which will restrict access to the given authorities.
Every client gets an access token as well as an refresh token. As long as the refresh token is valid, the client can gather a new access token without the need of re-authorization of the user.&lt;/p>
&lt;p>There are currently three different possibilities for an OAuth2 authorization server implemented:&lt;/p>
&lt;ul>
&lt;li>Using the contained authorization-server with username/password that are known by Liferay, no matter if Liferay is hosting the credentials itself or is attached to some central user management which it uses to authenticate users.&lt;/li>
&lt;li>Using the contained authorization-server inside an SSO network where an existing proxy can take care of the authentication and passing authenticated user information in configurable headers to the authorization-server which then performs authorization on top.&lt;/li>
&lt;li>Using keycloak as authorization-server. This case is not part of this wiki page and might need special configuration.&lt;/li>
&lt;/ul>
&lt;h2 id="data-principles">Data Principles&lt;/h2>
&lt;p>The REST API provides Hypermedia using &lt;a href="http://stateless.co/hal_specification.html">HAL&lt;/a> (Hypertext Application Language).
The following example shows some ideas of the REST API. It can be obtained by&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>https://[hostname]:[port]/resource/api/browser/index.html#/resource/api
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note that the response below is maybe not the exact same response of your current version:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;_links&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;sw360:attachments&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/attachments{?sha1}&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;templated&amp;#34;&lt;/span>: &lt;span style="color:#069;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;sw360:components&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/components&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;sw360:licenses&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/licenses&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;sw360:licenseinfo&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/licenseinfo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;sw360:projects&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/projects&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;sw360:releases&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/releases&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;sw360:users&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/users&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;sw360:vendors&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/vendors&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;sw360:vulnerabilities&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/vulnerabilities&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;profile&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/api/profile&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> },
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;curies&amp;#34;&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://dev.sw360.siemens.com/resource/docs/{rel}.html&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;name&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;sw360&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;templated&amp;#34;&lt;/span>: &lt;span style="color:#069;font-weight:bold">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="api-installation">API Installation&lt;/h1>
&lt;p>Both, the &lt;code>authorization-server&lt;/code> and the &lt;code>resource-server&lt;/code> can be build using Maven like the rest of the project. Each is generating a Spring Boot server that can be deployed in an application container, e.g. Tomcat.&lt;/p>
&lt;h1 id="api-configuration">API Configuration&lt;/h1>
&lt;p>Since the &lt;code>authorization-server&lt;/code> and the &lt;code>resource-server&lt;/code> are Spring Boot servers, they are configured as usual via &lt;code>/src/main/resources/application.yml&lt;/code>. In addition some configuration comes historically from &lt;code>sw360.properties&lt;/code>. Please note that all configurations could be provided centrally in the &lt;code>/etc/sw360/&lt;/code> directory. As such, the &lt;code>sw360.properties&lt;/code> sits directly in &lt;code>/etc/sw360/&lt;/code>. For rest-specific configurations the application considers the location &lt;code>/etc/sw360/rest&lt;/code>.&lt;/p>
&lt;h2 id="authorization-server-configuration">Authorization Server Configuration&lt;/h2>
&lt;h3 id="special-liferay-credentials-configuration">Special Liferay Credentials Configuration&lt;/h3>
&lt;p>In addition to the general properties in &lt;a href="#general-config">here&lt;/a> the following needs to be configured in the &lt;code>application.yml&lt;/code> when the authentication via Liferay username/password credentials should be possible:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Values&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>sw360:sw360-portal-server-url&lt;/td>
&lt;td>the url of the Liferay instance&lt;/td>
&lt;td>n/a (but could be given if environment variable is used like &lt;code>${SW360_PORTAL_SERVER_URL:http://127.0.0.1:8080}&lt;/code>)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sw360:sw360-liferay-company-id&lt;/td>
&lt;td>the id of the company in Liferay that sw360 is run for&lt;/td>
&lt;td>(but could be given if environment variable is used like &lt;code>${SW360_LIFERAY_COMPANY_ID:20155}&lt;/code>)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="special-sso-configuration">Special SSO Configuration&lt;/h3>
&lt;p>In addition to the general properties in &lt;a href="#general-config">here&lt;/a> the following needs to be configured in the &lt;code>application.yml&lt;/code> when the authentication via SSO should be possible:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Values&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>security:customheader:enabled&lt;/td>
&lt;td>Flag if the components needed for SSO should be active&lt;/td>
&lt;td>false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>security:customheader:headername:intermediateauthstore&lt;/td>
&lt;td>the name of the header that can be used for internal data transfer inside one roundtrip - it can be configured here because the proxy has to make sure that this header will not be passed from clients and will be used truly internal only&lt;/td>
&lt;td>custom-header-auth-marker&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>security:customheader:headername:email&lt;/td>
&lt;td>the name of the header that holds the email of the authenticated user (should be set be the proxy and must never be passed from clients)&lt;/td>
&lt;td>authenticated-email&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>security:customheader:headername:extid&lt;/td>
&lt;td>the name of the header that holds the extid of the authenticated user (should be set be the proxy and must never be passed from clients)&lt;/td>
&lt;td>authenticated-extid&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>:heavy_exclamation_mark: Please configure your SSO server and the proxy accordingly. In general, no unauthenticated request should reach the authorization server. And the configured headers should only be set by the proxy. If they are already contained in client requests, they must be removed!&lt;/p>
&lt;h4 id="removing-headers-in-apache">Removing Headers in Apache&lt;/h4>
&lt;p>In Apache you may use the &lt;a href="https://httpd.apache.org/docs/current/mod/mod_headers.html">&lt;code>mod_headers&lt;/code>&lt;/a> module to remove headers from the client. Using the default values from the table above, at least the following directives should be present in your configuration for all requests that are routed to the &lt;code>authorization-server&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>RequestHeader unset custom-header-auth-marker
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RequestHeader unset authenticated-email
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>RequestHeader unset authenticated-extid
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="a-namegeneral-configageneral-configuration">&lt;a name="general-config">&lt;/a>General Configuration&lt;/h3>
&lt;p>Possible properties in &lt;code>sw360.properties&lt;/code> file are:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Values&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>backend.url&lt;/td>
&lt;td>the url where the thrift services can be found&lt;/td>
&lt;td>http://127.0.0.1:8080&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rest.write.access.usergroup&lt;/td>
&lt;td>the user group level (`USER&lt;/td>
&lt;td>CLEARING_ADMIN&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>rest.admin.access.usergroup&lt;/td>
&lt;td>the user group level (`USER&lt;/td>
&lt;td>CLEARING_ADMIN&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The values in &lt;code>sw360.properties&lt;/code> should be migrated to the &lt;code>application.yml&lt;/code> in the future.&lt;/p>
&lt;p>Further important properties in &lt;code>application.yml&lt;/code> file are:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Values&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>couchdb:url&lt;/td>
&lt;td>the url of the CouchDB to use as client store&lt;/td>
&lt;td>n/a&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>couchdb:database&lt;/td>
&lt;td>the database name of the CouchDB database to use as client store&lt;/td>
&lt;td>n/a&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>couchdb:username&lt;/td>
&lt;td>if the CouchDB database needs authentication, enter the username here - if it does not need authentication, do not set this property at all, not even with an empty value&lt;/td>
&lt;td>null&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>couchdb:password&lt;/td>
&lt;td>if the CouchDB database needs authentication, enter the password here - if it does not need authentication, do not set this property at all, not even with an empty value&lt;/td>
&lt;td>null&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sw360:cors:allowed-origin&lt;/td>
&lt;td>value for cross origin resource sharing&lt;/td>
&lt;td>n/a&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>security:oauth2:resource:id&lt;/td>
&lt;td>should just be the same then in the resource server&lt;/td>
&lt;td>n/a&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>After this configuration is done the normal REST service for client management should be usable. This one is only accessible for authenticated users that get the &lt;code>ADMIN&lt;/code> authority (remember, the therefore necessary sw360 usergroup has just been configured). So the clients can be configured now.&lt;/p>
&lt;h1 id="client-management">Client Management&lt;/h1>
&lt;p>In the scenarios of this page, the shipped authorization server is used. So the next step is to configure a valid OAuth2 client in this authorization server. There should be one OAuth2 client per external REST API client (which in turn can have many different users). Therefore the authorization server offers a REST API for basic CRUD operations for configuring the clients that are stored in the just configured CouchDB. Since sw360-&lt;code>ADMIN&lt;/code> privileges are needed for client management, an authentication is needed to work with this API.&lt;/p>
&lt;p>For SSO users (basic-auth Liferay users can use other tools as well because other tools can handle basic auth - but they can also use this workflow):&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Open a browser with developer tools capabilities&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Open&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>https://[hostname]:[port]/authorization/client-management
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This page always shows the currently configured clients and can be refreshed after every manipulation of a client.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>To add a new client, enter the following javascript in the dev tools console in the current browser tab - of course after manipulating the client data to suit your needs&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>xmlHttpRequest = new XMLHttpRequest();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xmlHttpRequest.open(&amp;#39;POST&amp;#39;, &amp;#39;/authorization/client-management&amp;#39;, false);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xmlHttpRequest.setRequestHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xmlHttpRequest.setRequestHeader(&amp;#39;Accept&amp;#39;, &amp;#39;application/json&amp;#39;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xmlHttpRequest.send(JSON.stringify(
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;description&amp;#34; : &amp;#34;my first test client&amp;#34;,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;authorities&amp;#34; : [ &amp;#34;BASIC&amp;#34; ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;scope&amp;#34; : [ &amp;#34;READ&amp;#34; ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;access_token_validity&amp;#34; : 3600,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &amp;#34;refresh_token_validity&amp;#34; : 3600
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(xmlHttpRequest.responseText);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>to manipulate an existing client, do the same but add the clientid to the data object&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> &amp;#34;client_id&amp;#34; : &amp;#34;9e358ca832ce4ce99a770c7bd0f8e066&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>to remove an existing client, enter the following javascript in the dev tools console&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>xmlHttpRequest = new XMLHttpRequest();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xmlHttpRequest.open(&amp;#39;DELETE&amp;#39;, &amp;#39;/authorization/client-management/9e358ca832ce4ce99a770c7bd0f8e066&amp;#39;, false);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xmlHttpRequest.setRequestHeader(&amp;#39;Content-Type&amp;#39;, &amp;#39;application/json&amp;#39;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xmlHttpRequest.setRequestHeader(&amp;#39;Accept&amp;#39;, &amp;#39;application/json&amp;#39;);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>xmlHttpRequest.send();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>console.log(xmlHttpRequest.responseText);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;p>This way the session cookie of the SSO login will be used for the REST calls. This might also be possible in postman or curl or similar tools if you want to try to copy cookies (depending also on the SSO configuration). As said before, if Liferay username/password credentials can be used to authenticate then a tool like postman or curl can be used for the whole process. Just pass the credentials as basic-auth.&lt;/p>
&lt;h3 id="client-management-via-curl">Client Management via Curl&lt;/h3>
&lt;p>The above described call to create a rest client can also be done directly via one curl call:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#033">SW360_USER&lt;/span>&lt;span style="color:#555">=[&lt;/span>admin sw360 user&lt;span style="color:#555">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#033">SW360_PW&lt;/span>&lt;span style="color:#555">=[&lt;/span>corresponding sw360 admin user password&lt;span style="color:#555">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>curl -s -S &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> --user &lt;span style="color:#c30">&amp;#34;&lt;/span>&lt;span style="color:#a00">${&lt;/span>&lt;span style="color:#033">SW360_USER&lt;/span>&lt;span style="color:#a00">}&lt;/span>&lt;span style="color:#c30">:&lt;/span>&lt;span style="color:#a00">${&lt;/span>&lt;span style="color:#033">SW360_PW&lt;/span>&lt;span style="color:#a00">}&lt;/span>&lt;span style="color:#c30">&amp;#34;&lt;/span> &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> --header &lt;span style="color:#c30">&amp;#34;Content-Type: application/json&amp;#34;&lt;/span> &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> --header &lt;span style="color:#c30">&amp;#34;Accept: application/json&amp;#34;&lt;/span> &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> -X POST https://&lt;span style="color:#555">[&lt;/span>hostname&lt;span style="color:#555">]&lt;/span>:&lt;span style="color:#555">[&lt;/span>port&lt;span style="color:#555">]&lt;/span>/authorization/client-management &lt;span style="color:#c30;font-weight:bold">\
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30;font-weight:bold">&lt;/span> -d @- &lt;span style="color:#c30">&amp;lt;&amp;lt;EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">{
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;description&amp;#34; : &amp;#34;my first test client&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;authorities&amp;#34; : [ &amp;#34;BASIC&amp;#34; ],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;scope&amp;#34; : [ &amp;#34;READ&amp;#34; ],
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;access_token_validity&amp;#34; : 3600,
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30"> &amp;#34;refresh_token_validity&amp;#34; : 3600
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">}
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This only works with the liferay basic-auth mechanism, SSO is not supported via curl.&lt;/p>
&lt;h2 id="oauth2-access-token">OAuth2 Access Token&lt;/h2>
&lt;p>Now with a configured client it is possible to retrieve an access token for the REST API from the authorization server. There is again a difference in SSO environments and Liferay username/password environments.&lt;/p>
&lt;h3 id="sso-backed-access-token">SSO Backed Access Token&lt;/h3>
&lt;p>Probably the browser has to be used again because many SSO environments are based on certificates that are read from keycards and the necessary libs are often built into the browser. So just call the URL&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>https://[hostname]:[port]/authorization/oauth/token?grant_type=password&amp;amp;client_id=[clientid]&amp;amp;client_secret=[clientsecret]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course the client id and the client secret should be replaced by the values of the configured client. The received response should look similar to&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;access_token&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsic3czNjAtUkVTVC1BUEkiXSwidXNlcl9uYW1lIjoiYWRtaW5Ac3czNjAub3JnIiwic2NvcGUiOlsiUkVBRCJdLCJleHAiOjE1NjM4MDYwNDQsImF1dGhvcml0aWVzIjpbIlJFQUQiXSwianRpIjoiZDY4ZWY1YWEtZTQ5My00Y2YxLWI2NGQtNWE5MTdkY2M2ZTYwIiwiY2xpZW50X2lkIjoiMTcyMmZmYzdkZWE3MTU3OGQ5ZWE1ZTZhNmMwMDA4NzMifQ.iO5sLrqRcZfzvMP5gjaJhk3caWyZLkUesdbMfqCGy4V5rbnU9QP1LjdybY0Udh8hvAvhlpqPfaxeKe1c3-gQs5MYlqG0lNQCyWcb7NRHj8VFlwLPuJRZJNk3tybvgITVm9r14pfAXogpVE0S4KihD2W1_SoKH4NzTa2vOEG0CK4VzCLetxUlUuePxZH8ugouqbS2d0SpyeeMTm-PzxzzeTb_4ulGpg63eE1v7GvTsI23uh2WfIgHBa1GRr5jWtE0Meq-5UFCVQkhMm8P-r8wO2iuRblCu6a-bWwy7bfdj3S2VDnqSQskE2dVrC_qMs-V2AGvCV1xvlF0P8A4tgwL-w&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;token_type&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;bearer&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;refresh_token&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsic3czNjAtUkVTVC1BUEkiXSwidXNlcl9uYW1lIjoiYWRtaW5Ac3czNjAub3JnIiwic2NvcGUiOlsiUkVBRCJdLCJhdGkiOiJkNjhlZjVhYS1lNDkzLTRjZjEtYjY0ZC01YTkxN2RjYzZlNjAiLCJleHAiOjE1NjM4MDYwNDQsImF1dGhvcml0aWVzIjpbIlJFQUQiXSwianRpIjoiM2VkZDcxODAtMTBlYi00Y2MwLTg0NTUtMGYwZmIyMWMwYmU0IiwiY2xpZW50X2lkIjoiMTcyMmZmYzdkZWE3MTU3OGQ5ZWE1ZTZhNmMwMDA4NzMifQ.iMGfdHWpJNseoxIk7tKCNTyC1w4_AJ4cSv6kO64_BkF54MLudvyf9uVSIHpAeHhSFdvhbjksynRqq_u78vW8ptY1la65Qx8glHz0sktWBfMDJsUA4ynU2iZbKU92f2OOf3wQRVt38-Y1mBUsDMIStyKTDeIXGT3LJr_8k5dRAGvayixaezxDFw3dWK2M6P9h-ZnfEP47HpIUZrG8cgwPmNCZ9gBXsqVnueDYZth6TaEKIvWbkZtwY0ikWKyJL2xLm78O1ii3lA5ENt5I0DTfTm8QuK_zcm679W9jF0jvwIR71fM0JSWjkBoXd2h9oLmE2CF2sFVaJor_ermk-L0LsA&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;expires_in&amp;#34;&lt;/span> : &lt;span style="color:#f60">3599&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;scope&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;READ&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;jti&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;d68ef5aa-e493-4cf1-b64d-5a917dcc6e60&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>From this response the value of the &lt;code>access_token&lt;/code> and probably &lt;code>refresh_token&lt;/code> field is the one to copy-paste for later usage.&lt;/p>
&lt;h3 id="liferay-backed-access-token">Liferay Backed Access Token&lt;/h3>
&lt;p>With a Liferay backed authentication all REST clients that offer basic auth support can be used. For example &lt;code>curl&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-Bash" data-lang="Bash">&lt;span style="display:flex;">&lt;span>curl -X POST --user &lt;span style="color:#c30">&amp;#39;[clientid]:[clientsecret]&amp;#39;&lt;/span> -d &lt;span style="color:#c30">&amp;#39;grant_type=password&amp;amp;username=[username]&amp;amp;password=[password]&amp;#39;&lt;/span> https://&lt;span style="color:#555">[&lt;/span>hostname&lt;span style="color:#555">]&lt;/span>:&lt;span style="color:#555">[&lt;/span>port&lt;span style="color:#555">]&lt;/span>/authorization/oauth/token -k
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Example response:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;access_token&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsic3czNjAtUkVTVC1BUEkiXSwidXNlcl9uYW1lIjoiYWRtaW5Ac3czNjAub3JnIiwic2NvcGUiOlsiUkVBRCJdLCJleHAiOjE1NjM4MDYwNDQsImF1dGhvcml0aWVzIjpbIlJFQUQiXSwianRpIjoiZDY4ZWY1YWEtZTQ5My00Y2YxLWI2NGQtNWE5MTdkY2M2ZTYwIiwiY2xpZW50X2lkIjoiMTcyMmZmYzdkZWE3MTU3OGQ5ZWE1ZTZhNmMwMDA4NzMifQ.iO5sLrqRcZfzvMP5gjaJhk3caWyZLkUesdbMfqCGy4V5rbnU9QP1LjdybY0Udh8hvAvhlpqPfaxeKe1c3-gQs5MYlqG0lNQCyWcb7NRHj8VFlwLPuJRZJNk3tybvgITVm9r14pfAXogpVE0S4KihD2W1_SoKH4NzTa2vOEG0CK4VzCLetxUlUuePxZH8ugouqbS2d0SpyeeMTm-PzxzzeTb_4ulGpg63eE1v7GvTsI23uh2WfIgHBa1GRr5jWtE0Meq-5UFCVQkhMm8P-r8wO2iuRblCu6a-bWwy7bfdj3S2VDnqSQskE2dVrC_qMs-V2AGvCV1xvlF0P8A4tgwL-w&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;token_type&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;bearer&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;refresh_token&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsic3czNjAtUkVTVC1BUEkiXSwidXNlcl9uYW1lIjoiYWRtaW5Ac3czNjAub3JnIiwic2NvcGUiOlsiUkVBRCJdLCJhdGkiOiJkNjhlZjVhYS1lNDkzLTRjZjEtYjY0ZC01YTkxN2RjYzZlNjAiLCJleHAiOjE1NjM4MDYwNDQsImF1dGhvcml0aWVzIjpbIlJFQUQiXSwianRpIjoiM2VkZDcxODAtMTBlYi00Y2MwLTg0NTUtMGYwZmIyMWMwYmU0IiwiY2xpZW50X2lkIjoiMTcyMmZmYzdkZWE3MTU3OGQ5ZWE1ZTZhNmMwMDA4NzMifQ.iMGfdHWpJNseoxIk7tKCNTyC1w4_AJ4cSv6kO64_BkF54MLudvyf9uVSIHpAeHhSFdvhbjksynRqq_u78vW8ptY1la65Qx8glHz0sktWBfMDJsUA4ynU2iZbKU92f2OOf3wQRVt38-Y1mBUsDMIStyKTDeIXGT3LJr_8k5dRAGvayixaezxDFw3dWK2M6P9h-ZnfEP47HpIUZrG8cgwPmNCZ9gBXsqVnueDYZth6TaEKIvWbkZtwY0ikWKyJL2xLm78O1ii3lA5ENt5I0DTfTm8QuK_zcm679W9jF0jvwIR71fM0JSWjkBoXd2h9oLmE2CF2sFVaJor_ermk-L0LsA&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;expires_in&amp;#34;&lt;/span> : &lt;span style="color:#f60">3599&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;scope&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;READ&amp;#34;&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;jti&amp;#34;&lt;/span> : &lt;span style="color:#c30">&amp;#34;d68ef5aa-e493-4cf1-b64d-5a917dcc6e60&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Of course, the username and password must be your user credentials and the client id and secret have to be replaced with the configured values. And again, the wanted value is the value of the field &lt;code>access_token&lt;/code> and probably &lt;code>refresh_token&lt;/code>.&lt;/p>
&lt;p>More Links:&lt;/p>
&lt;ul>
&lt;li>OAuth2 more information: &lt;a href="https://oauth.net/2/">https://oauth.net/2/&lt;/a>&lt;/li>
&lt;li>Decode Bearer tokens at: &lt;a href="https://jwt.io/">https://jwt.io/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="oauth2-refresh-token">OAuth2 Refresh Token&lt;/h2>
&lt;p>The authorization server supports so called refresh tokens to generate new access tokens after they have been expired. New access tokens can be generated with the use of the &lt;code>refresh_token&lt;/code> without further re-authorization of the user. The following url must be used:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span> http://localhost/authorization/oauth/token?grant_type=refresh_token&amp;amp;refresh_token=&amp;lt;REFRESH_TOKEN&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The client must pass its credentials via basic authentication. Though a user authentication is not necessary.
If you are authentication your users on a proxy, you have to configure that proxy in a way that it does not block requests to the above url. As marker the &amp;lsquo;grant_type=refresh_token&amp;rsquo; query parameter may be used.&lt;/p>
&lt;h2 id="example-apache-configuration">Example Apache configuration&lt;/h2>
&lt;p>The following example shows the relevant part for an Apache proxy to configure
authentication of the &lt;code>authorization-server&lt;/code> properly:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-apache" data-lang="apache">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#309;font-weight:bold">&amp;lt;Location&lt;/span> &lt;span style="color:#c30">/authorization/oauth/token&lt;/span>&lt;span style="color:#309;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#366">Order&lt;/span> allow,deny
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#366">Allow&lt;/span> from &lt;span style="color:#069;font-weight:bold">all&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;lt;If&lt;/span> &lt;span style="color:#c30">&amp;#34;%{QUERY_STRING} =~ /^grant_type=refresh_token\&amp;amp;/&amp;#34;&lt;/span>&lt;span style="color:#309;font-weight:bold">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#09f;font-style:italic"># No authentication needed&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;lt;/If&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;lt;Else&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#09f;font-style:italic"># Configure your authentication here&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;lt;/Else&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#366">ProxyPass&lt;/span> https://localhost:8443/authorization/oauth/token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#366">ProxyPassReverse&lt;/span> https://localhost:8443/authorization/oauth/token
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#309;font-weight:bold">&amp;lt;/Location&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="resource-server-configuration">Resource Server Configuration&lt;/h1>
&lt;p>Now that access tokens can be generated, the resource server has to be configured. The same general ideas of &lt;a href="#general-config">general config&lt;/a> apply. The properties of the &lt;code>application.yml&lt;/code> are&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Key&lt;/th>
&lt;th>Values&lt;/th>
&lt;th>Default&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>sw360:thrift-server-url&lt;/td>
&lt;td>the url where the thrift services can be found, e.g. http://localhost:8080&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sw360:test-user-id&lt;/td>
&lt;td>only for developing, simple test user short cut, must be pulled off for productive&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sw360:test-user-passwors&lt;/td>
&lt;td>see above&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sw360:couchdb-url&lt;/td>
&lt;td>the url of the CouhDB server for attachment handling, e.g. https://localhost:5984&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>sw360:cors:allowed-origin&lt;/td>
&lt;td>value for cross origin resource sharing&lt;/td>
&lt;td>n/a&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The REST API is now completely usable via an own client or testwise with integrated tools.&lt;/p>
&lt;h1 id="tools">Tools&lt;/h1>
&lt;p>To get data and interact with the sw360 REST API the HAL-Browser is recommended. Currently, the HAL-Browser is also deployed on the sw360 development instance, but this is likely to change once the REST API has evolved more. Currently the URL of HAL-Browser is:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>https://[hostname]:[port]/resource/api/browser/index.html#/resource/api
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>An example for a screenshot is as follows:&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/29916928/39576770-90b2b576-4edf-11e8-9d1b-742c10d88b8e.png" alt="rest-hal-explorer">&lt;/p>
&lt;p>When using other tools the access token has to be set as header parameter in the REST request. Please add a new header:&lt;/p>
&lt;ul>
&lt;li>Key: Authorization&lt;/li>
&lt;li>As value you need to enter: &lt;code>Bearer [ACCESS_TOKEN]&lt;/code> where &lt;code>[ACCESS_TOKEN]&lt;/code> actually contains the token&lt;/li>
&lt;/ul>
&lt;h2 id="example--get-a-list-of-projects">Example â€“ Get a list of projects&lt;/h2>
&lt;p>Here is an example how to query for all projects as HTTP GET Request. As for the resource endpoint, the request:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-fallback" data-lang="fallback">&lt;span style="display:flex;">&lt;span>https://sw360.org/resource/api/projects (or /resource/api/projects)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>will return the following response:&lt;/p>
&lt;p>&lt;img src="https://user-images.githubusercontent.com/29916928/39579586-6b1d1736-4ee7-11e8-8faf-da71c8776680.png" alt="rest-explorer2">&lt;/p>
&lt;h1 id="api-documentation">API Documentation&lt;/h1>
&lt;p>sw360 deploys a REST API documentation at every instance. There are the following URLs offered at each instance&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>URL&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>https://[hostname]:[port]/resource/docs/index.html&lt;/td>
&lt;td>Small overview page&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>https://[hostname]:[port]/resource/docs/api-guide.html&lt;/td>
&lt;td>The API description for the currently running server&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>https://[hostname]:[port]/resource/api/browser/index.html#/resource/api&lt;/td>
&lt;td>Integrated HAL browser to directly use the API&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="known-problems">Known Problems&lt;/h1>
&lt;p>If you use Nginx or Apache as request front end server there maybe some configuration caveats: The REST API objects provides self links to reference to other objects also including the protocol prefix. These links are realized on Hypertext Application Language (HAL) for example you will find in REST responses:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-json" data-lang="json">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#c30">&amp;#34;_links&amp;#34;&lt;/span>&lt;span style="color:#a00;background-color:#faa">:&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;self&amp;#34;&lt;/span>: {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#309;font-weight:bold">&amp;#34;href&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://localhost:8443/resource/api/projects/065f3aa45c2683297fd1bb39296f519d&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The REST spring boot applications are using the Tomcat environment configuration to generate the HAL links. If the Tomcat is only configured as HTTP, the generated links will contain the &lt;code>http&lt;/code> protocol and port - which is a problem if the server should be contacted over &lt;code>https&lt;/code>only. This problem occurs, if tomcat is used together with Nginx, Apache httpd or other Web servers, which are configured to repsond only to &lt;code>https&lt;/code>.&lt;/p>
&lt;p>Solution is to set for example in Nginx HTTP &amp;lsquo;X-Forward-*&amp;rsquo; headers on a reverse proxy, for example:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-nginx" data-lang="nginx">&lt;span style="display:flex;">&lt;span> &lt;span style="color:#069;font-weight:bold">location&lt;/span> &lt;span style="color:#c30">/&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#069;font-weight:bold">...&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#c30">proxy_set_header&lt;/span> &lt;span style="color:#c30">X-Forwarded-Port&lt;/span> &lt;span style="color:#f60">443&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#069;font-weight:bold">proxy_set_header&lt;/span> &lt;span style="color:#c30">X-Forwarded-Proto&lt;/span> &lt;span style="color:#c30">https&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For other Web severs, there might a similar solution.&lt;/p></description></item></channel></rss>